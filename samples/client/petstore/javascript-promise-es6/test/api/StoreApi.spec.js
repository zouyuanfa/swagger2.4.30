/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerPetstore);
  }
}(this, function(expect, SwaggerPetstore) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerPetstore.StoreApi();
  });

  describe('(package)', function() {
    describe('StoreApi', function() {
      describe('deleteOrder', function() {
        it('should call deleteOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrder call
          /*
          var orderId = "orderId_example";

          instance.deleteOrder(orderId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInventory', function() {
        it('should call getInventory successfully', function(done) {
          // TODO: uncomment getInventory call and complete the assertions
          /*

          instance.getInventory().then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('number');
              // expect(data).to.be(null);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderById', function() {
        it('should call getOrderById successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderById call and complete the assertions
          /*
          var orderId = 789;

          instance.getOrderById(orderId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerPetstore.Order);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.petId).to.be.a('number');
            // expect(data.petId).to.be("0");
            expect(data.quantity).to.be.a('number');
            // expect(data.quantity).to.be(0);
            expect(data.shipDate).to.be.a(Date);
            // expect(data.shipDate).to.be(new Date());
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("placed");
            expect(data.complete).to.be.a('boolean');
            // expect(data.complete).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('placeOrder', function() {
        it('should call placeOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for placeOrder call and complete the assertions
          /*
          var body = new SwaggerPetstore.Order();
          body.id = "0";
          body.petId = "0";
          body.quantity = 0;
          body.shipDate = new Date();
          body.status = "placed";
          body.complete = false;

          instance.placeOrder(body).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SwaggerPetstore.Order);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.petId).to.be.a('number');
            // expect(data.petId).to.be("0");
            expect(data.quantity).to.be.a('number');
            // expect(data.quantity).to.be(0);
            expect(data.shipDate).to.be.a(Date);
            // expect(data.shipDate).to.be(new Date());
            expect(data.status).to.be.a('string');
            // expect(data.status).to.be("placed");
            expect(data.complete).to.be.a('boolean');
            // expect(data.complete).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
